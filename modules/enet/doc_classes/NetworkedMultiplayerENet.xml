<?xml version="1.0" encoding="UTF-8" ?>
<class name="NetworkedMultiplayerENet" inherits="NetworkedMultiplayerPeer" category="Core" version="3.1">
	<brief_description>
		PacketPeer implementation using the ENet library.
	</brief_description>
	<description>
		A PacketPeer implementation that should be passed to [method SceneTree.set_network_peer] after being initialized as either a client or server. Events can then be handled by connecting to [SceneTree] signals.
	</description>
	<tutorials>
	</tutorials>
	<demos>
	</demos>
	<methods>
		<method name="close_connection">
			<return type="void">
			</return>
			<argument index="0" name="wait_usec" type="int" default="100">
			</argument>
			<description>
			</description>
		</method>
		<method name="create_client">
			<return type="int" enum="Error">
			</return>
			<argument index="0" name="address" type="String">
			</argument>
			<argument index="1" name="port" type="int">
			</argument>
			<argument index="2" name="in_bandwidth" type="int" default="0">
			</argument>
			<argument index="3" name="out_bandwidth" type="int" default="0">
			</argument>
			<argument index="4" name="client_port" type="int" default="0">
			</argument>
			<description>
			</description>
		</method>
		<method name="create_server">
			<return type="int" enum="Error">
			</return>
			<argument index="0" name="port" type="int">
			</argument>
			<argument index="1" name="max_clients" type="int" default="32">
			</argument>
			<argument index="2" name="in_bandwidth" type="int" default="0">
			</argument>
			<argument index="3" name="out_bandwidth" type="int" default="0">
			</argument>
			<description>
			</description>
		</method>
		<method name="disconnect_peer">
			<return type="void">
			</return>
			<argument index="0" name="id" type="int">
			</argument>
			<argument index="1" name="now" type="bool" default="false">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_last_packet_channel" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="get_packet_channel" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="get_peer_address" qualifiers="const">
			<return type="String">
			</return>
			<argument index="0" name="id" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_peer_port" qualifiers="const">
			<return type="int">
			</return>
			<argument index="0" name="id" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_bind_ip">
			<return type="void">
			</return>
			<argument index="0" name="ip" type="String">
			</argument>
			<description>
			</description>
		</method>
	</methods>
	<members>
		<member name="always_ordered" type="bool" setter="set_always_ordered" getter="is_always_ordered">
		</member>
		<member name="channel_count" type="int" setter="set_channel_count" getter="get_channel_count">
		</member>
		<member name="compression_mode" type="int" setter="set_compression_mode" getter="get_compression_mode" enum="NetworkedMultiplayerENet.CompressionMode">
		</member>
		<member name="transfer_channel" type="int" setter="set_transfer_channel" getter="get_transfer_channel">
		</member>
	</members>
	<constants>
		<constant name="COMPRESS_NONE" value="0" enum="CompressionMode">
		</constant>
		<constant name="COMPRESS_RANGE_CODER" value="1" enum="CompressionMode">
		</constant>
		<constant name="COMPRESS_FASTLZ" value="2" enum="CompressionMode">
		</constant>
		<constant name="COMPRESS_ZLIB" value="3" enum="CompressionMode">
		</constant>
		<constant name="COMPRESS_ZSTD" value="4" enum="CompressionMode">
		</constant>
	</constants>
</class>
