<?xml version="1.0" encoding="UTF-8" ?>
<class name="SceneTree" inherits="MainLoop" category="Core" version="3.1">
	<brief_description>
		SceneTree manages a hierarchy of nodes.
	</brief_description>
	<description>
		As one of the most important classes, the [code]SceneTree[/code] manages the hierarchy of nodes in a scene as well as scenes themselves. Nodes can be added, retrieved and removed. The whole scene tree (and thus the current scene) can be paused. Scenes can be loaded, switched and reloaded. You can also use the SceneTree to organize your nodes into groups: every node can be assigned as many groups as you want to create, e.g. a "enemy" group. You can then iterate these groups or even call methods and set properties on all the group's members at once.
	</description>
	<tutorials>
	</tutorials>
	<demos>
	</demos>
	<methods>
		<method name="call_group" qualifiers="vararg">
			<return type="Variant">
			</return>
			<argument index="0" name="group" type="String">
			</argument>
			<argument index="1" name="method" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="call_group_flags" qualifiers="vararg">
			<return type="Variant">
			</return>
			<argument index="0" name="flags" type="int">
			</argument>
			<argument index="1" name="group" type="String">
			</argument>
			<argument index="2" name="method" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="change_scene">
			<return type="int" enum="Error">
			</return>
			<argument index="0" name="path" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="change_scene_to">
			<return type="int" enum="Error">
			</return>
			<argument index="0" name="packed_scene" type="PackedScene">
			</argument>
			<description>
			</description>
		</method>
		<method name="create_timer">
			<return type="SceneTreeTimer">
			</return>
			<argument index="0" name="time_sec" type="float">
			</argument>
			<argument index="1" name="pause_mode_process" type="bool" default="true">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_frame" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="get_network_connected_peers" qualifiers="const">
			<return type="PoolIntArray">
			</return>
			<description>
			</description>
		</method>
		<method name="get_network_unique_id" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="get_node_count" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="get_nodes_in_group">
			<return type="Array">
			</return>
			<argument index="0" name="group" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_rpc_sender_id" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="has_group" qualifiers="const">
			<return type="bool">
			</return>
			<argument index="0" name="name" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="has_network_peer" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="is_input_handled">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="is_network_server" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="notify_group">
			<return type="void">
			</return>
			<argument index="0" name="group" type="String">
			</argument>
			<argument index="1" name="notification" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="notify_group_flags">
			<return type="void">
			</return>
			<argument index="0" name="call_flags" type="int">
			</argument>
			<argument index="1" name="group" type="String">
			</argument>
			<argument index="2" name="notification" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="queue_delete">
			<return type="void">
			</return>
			<argument index="0" name="obj" type="Object">
			</argument>
			<description>
			</description>
		</method>
		<method name="quit">
			<return type="void">
			</return>
			<description>
			</description>
		</method>
		<method name="reload_current_scene">
			<return type="int" enum="Error">
			</return>
			<description>
			</description>
		</method>
		<method name="set_auto_accept_quit">
			<return type="void">
			</return>
			<argument index="0" name="enabled" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_group">
			<return type="void">
			</return>
			<argument index="0" name="group" type="String">
			</argument>
			<argument index="1" name="property" type="String">
			</argument>
			<argument index="2" name="value" type="Variant">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_group_flags">
			<return type="void">
			</return>
			<argument index="0" name="call_flags" type="int">
			</argument>
			<argument index="1" name="group" type="String">
			</argument>
			<argument index="2" name="property" type="String">
			</argument>
			<argument index="3" name="value" type="Variant">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_input_as_handled">
			<return type="void">
			</return>
			<description>
			</description>
		</method>
		<method name="set_quit_on_go_back">
			<return type="void">
			</return>
			<argument index="0" name="enabled" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_screen_stretch">
			<return type="void">
			</return>
			<argument index="0" name="mode" type="int" enum="SceneTree.StretchMode">
			</argument>
			<argument index="1" name="aspect" type="int" enum="SceneTree.StretchAspect">
			</argument>
			<argument index="2" name="minsize" type="Vector2">
			</argument>
			<argument index="3" name="shrink" type="float" default="1">
			</argument>
			<description>
			</description>
		</method>
	</methods>
	<members>
		<member name="current_scene" type="Node" setter="set_current_scene" getter="get_current_scene">
		</member>
		<member name="debug_collisions_hint" type="bool" setter="set_debug_collisions_hint" getter="is_debugging_collisions_hint">
		</member>
		<member name="debug_navigation_hint" type="bool" setter="set_debug_navigation_hint" getter="is_debugging_navigation_hint">
		</member>
		<member name="edited_scene_root" type="Node" setter="set_edited_scene_root" getter="get_edited_scene_root">
		</member>
		<member name="multiplayer" type="MultiplayerAPI" setter="set_multiplayer" getter="get_multiplayer">
		</member>
		<member name="network_peer" type="NetworkedMultiplayerPeer" setter="set_network_peer" getter="get_network_peer">
		</member>
		<member name="paused" type="bool" setter="set_pause" getter="is_paused">
		</member>
		<member name="refuse_new_network_connections" type="bool" setter="set_refuse_new_network_connections" getter="is_refusing_new_network_connections">
		</member>
		<member name="root" type="Viewport" setter="" getter="get_root">
		</member>
		<member name="use_font_oversampling" type="bool" setter="set_use_font_oversampling" getter="is_using_font_oversampling">
		</member>
	</members>
	<signals>
		<signal name="connected_to_server">
			<description>
			</description>
		</signal>
		<signal name="connection_failed">
			<description>
			</description>
		</signal>
		<signal name="files_dropped">
			<argument index="0" name="files" type="PoolStringArray">
			</argument>
			<argument index="1" name="screen" type="int">
			</argument>
			<description>
			</description>
		</signal>
		<signal name="idle_frame">
			<description>
			</description>
		</signal>
		<signal name="network_peer_connected">
			<argument index="0" name="id" type="int">
			</argument>
			<description>
			</description>
		</signal>
		<signal name="network_peer_disconnected">
			<argument index="0" name="id" type="int">
			</argument>
			<description>
			</description>
		</signal>
		<signal name="node_added">
			<argument index="0" name="node" type="Object">
			</argument>
			<description>
			</description>
		</signal>
		<signal name="node_configuration_warning_changed">
			<argument index="0" name="node" type="Object">
			</argument>
			<description>
			</description>
		</signal>
		<signal name="node_removed">
			<argument index="0" name="node" type="Object">
			</argument>
			<description>
			</description>
		</signal>
		<signal name="physics_frame">
			<description>
			</description>
		</signal>
		<signal name="screen_resized">
			<description>
			</description>
		</signal>
		<signal name="server_disconnected">
			<description>
			</description>
		</signal>
		<signal name="tree_changed">
			<description>
			</description>
		</signal>
	</signals>
	<constants>
		<constant name="GROUP_CALL_DEFAULT" value="0" enum="GroupCallFlags">
		</constant>
		<constant name="GROUP_CALL_REVERSE" value="1" enum="GroupCallFlags">
		</constant>
		<constant name="GROUP_CALL_REALTIME" value="2" enum="GroupCallFlags">
		</constant>
		<constant name="GROUP_CALL_UNIQUE" value="4" enum="GroupCallFlags">
		</constant>
		<constant name="STRETCH_MODE_DISABLED" value="0" enum="StretchMode">
		</constant>
		<constant name="STRETCH_MODE_2D" value="1" enum="StretchMode">
		</constant>
		<constant name="STRETCH_MODE_VIEWPORT" value="2" enum="StretchMode">
		</constant>
		<constant name="STRETCH_ASPECT_IGNORE" value="0" enum="StretchAspect">
		</constant>
		<constant name="STRETCH_ASPECT_KEEP" value="1" enum="StretchAspect">
		</constant>
		<constant name="STRETCH_ASPECT_KEEP_WIDTH" value="2" enum="StretchAspect">
		</constant>
		<constant name="STRETCH_ASPECT_KEEP_HEIGHT" value="3" enum="StretchAspect">
		</constant>
		<constant name="STRETCH_ASPECT_EXPAND" value="4" enum="StretchAspect">
		</constant>
	</constants>
</class>
