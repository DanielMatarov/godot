<?xml version="1.0" encoding="UTF-8" ?>
<class name="File" inherits="Reference" category="Core" version="3.1">
	<brief_description>
		Type to handle file reading and writing operations.
	</brief_description>
	<description>
		File type. This is used to permanently store data into the user device's file system and to read from it. This can be used to store game save data or player configuration files, for example.
		Here's a sample on how to write and read from a file:
		[codeblock]
		func save(content):
		    var file = File.new()
		    file.open("user://save_game.dat", File.WRITE)
		    file.store_string(content)
		    file.close()

		func load():
		    var file = File.new()
		    file.open("user://save_game.dat", File.READ)
		    var content = file.get_as_text()
		    file.close()
		    return content
		[/codeblock]
	</description>
	<tutorials>
	</tutorials>
	<demos>
	</demos>
	<methods>
		<method name="close">
			<return type="void">
			</return>
			<description>
			</description>
		</method>
		<method name="eof_reached" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="file_exists" qualifiers="const">
			<return type="bool">
			</return>
			<argument index="0" name="path" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_16" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="get_32" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="get_64" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="get_8" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="get_as_text" qualifiers="const">
			<return type="String">
			</return>
			<description>
			</description>
		</method>
		<method name="get_buffer" qualifiers="const">
			<return type="PoolByteArray">
			</return>
			<argument index="0" name="len" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_csv_line" qualifiers="const">
			<return type="PoolStringArray">
			</return>
			<argument index="0" name="delim" type="String" default="&quot;,&quot;">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_double" qualifiers="const">
			<return type="float">
			</return>
			<description>
			</description>
		</method>
		<method name="get_error" qualifiers="const">
			<return type="int" enum="Error">
			</return>
			<description>
			</description>
		</method>
		<method name="get_float" qualifiers="const">
			<return type="float">
			</return>
			<description>
			</description>
		</method>
		<method name="get_len" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="get_line" qualifiers="const">
			<return type="String">
			</return>
			<description>
			</description>
		</method>
		<method name="get_md5" qualifiers="const">
			<return type="String">
			</return>
			<argument index="0" name="path" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_modified_time" qualifiers="const">
			<return type="int">
			</return>
			<argument index="0" name="file" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_pascal_string">
			<return type="String">
			</return>
			<description>
			</description>
		</method>
		<method name="get_path" qualifiers="const">
			<return type="String">
			</return>
			<description>
			</description>
		</method>
		<method name="get_path_absolute" qualifiers="const">
			<return type="String">
			</return>
			<description>
			</description>
		</method>
		<method name="get_position" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="get_real" qualifiers="const">
			<return type="float">
			</return>
			<description>
			</description>
		</method>
		<method name="get_sha256" qualifiers="const">
			<return type="String">
			</return>
			<argument index="0" name="path" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_var" qualifiers="const">
			<return type="Variant">
			</return>
			<description>
			</description>
		</method>
		<method name="is_open" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="open">
			<return type="int" enum="Error">
			</return>
			<argument index="0" name="path" type="String">
			</argument>
			<argument index="1" name="flags" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="open_compressed">
			<return type="int" enum="Error">
			</return>
			<argument index="0" name="path" type="String">
			</argument>
			<argument index="1" name="mode_flags" type="int">
			</argument>
			<argument index="2" name="compression_mode" type="int" default="0">
			</argument>
			<description>
			</description>
		</method>
		<method name="open_encrypted">
			<return type="int" enum="Error">
			</return>
			<argument index="0" name="path" type="String">
			</argument>
			<argument index="1" name="mode_flags" type="int">
			</argument>
			<argument index="2" name="key" type="PoolByteArray">
			</argument>
			<description>
			</description>
		</method>
		<method name="open_encrypted_with_pass">
			<return type="int" enum="Error">
			</return>
			<argument index="0" name="path" type="String">
			</argument>
			<argument index="1" name="mode_flags" type="int">
			</argument>
			<argument index="2" name="pass" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="seek">
			<return type="void">
			</return>
			<argument index="0" name="position" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="seek_end">
			<return type="void">
			</return>
			<argument index="0" name="position" type="int" default="0">
			</argument>
			<description>
			</description>
		</method>
		<method name="store_16">
			<return type="void">
			</return>
			<argument index="0" name="value" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="store_32">
			<return type="void">
			</return>
			<argument index="0" name="value" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="store_64">
			<return type="void">
			</return>
			<argument index="0" name="value" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="store_8">
			<return type="void">
			</return>
			<argument index="0" name="value" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="store_buffer">
			<return type="void">
			</return>
			<argument index="0" name="buffer" type="PoolByteArray">
			</argument>
			<description>
			</description>
		</method>
		<method name="store_double">
			<return type="void">
			</return>
			<argument index="0" name="value" type="float">
			</argument>
			<description>
			</description>
		</method>
		<method name="store_float">
			<return type="void">
			</return>
			<argument index="0" name="value" type="float">
			</argument>
			<description>
			</description>
		</method>
		<method name="store_line">
			<return type="void">
			</return>
			<argument index="0" name="line" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="store_pascal_string">
			<return type="void">
			</return>
			<argument index="0" name="string" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="store_real">
			<return type="void">
			</return>
			<argument index="0" name="value" type="float">
			</argument>
			<description>
			</description>
		</method>
		<method name="store_string">
			<return type="void">
			</return>
			<argument index="0" name="string" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="store_var">
			<return type="void">
			</return>
			<argument index="0" name="value" type="Variant">
			</argument>
			<description>
			</description>
		</method>
	</methods>
	<members>
		<member name="endian_swap" type="bool" setter="set_endian_swap" getter="get_endian_swap">
		</member>
	</members>
	<constants>
		<constant name="READ" value="1" enum="ModeFlags">
		</constant>
		<constant name="WRITE" value="2" enum="ModeFlags">
		</constant>
		<constant name="READ_WRITE" value="3" enum="ModeFlags">
		</constant>
		<constant name="WRITE_READ" value="7" enum="ModeFlags">
		</constant>
		<constant name="COMPRESSION_FASTLZ" value="0" enum="CompressionMode">
		</constant>
		<constant name="COMPRESSION_DEFLATE" value="1" enum="CompressionMode">
		</constant>
		<constant name="COMPRESSION_ZSTD" value="2" enum="CompressionMode">
		</constant>
		<constant name="COMPRESSION_GZIP" value="3" enum="CompressionMode">
		</constant>
	</constants>
</class>
