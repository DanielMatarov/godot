<?xml version="1.0" encoding="UTF-8" ?>
<class name="Basis" category="Built-In Types" version="3.1">
	<brief_description>
		3x3 matrix datatype.
	</brief_description>
	<description>
		3x3 matrix used for 3D rotation and scale. Contains 3 vector fields x,y and z as its columns, which can be interpreted as the local basis vectors of a transformation. Can also be accessed as array of 3D vectors. These vectors are orthogonal to each other, but are not necessarily normalized (due to scaling). Almost always used as orthogonal basis for a [Transform].
		For such use, it is composed of a scaling and a rotation matrix, in that order (M = R.S).
	</description>
	<tutorials>
	</tutorials>
	<demos>
	</demos>
	<methods>
		<method name="Basis">
			<return type="Basis">
			</return>
			<argument index="0" name="from" type="Quat">
			</argument>
			<description>
			</description>
		</method>
		<method name="Basis">
			<return type="Basis">
			</return>
			<argument index="0" name="from" type="Vector3">
			</argument>
			<description>
			</description>
		</method>
		<method name="Basis">
			<return type="Basis">
			</return>
			<argument index="0" name="axis" type="Vector3">
			</argument>
			<argument index="1" name="phi" type="float">
			</argument>
			<description>
			</description>
		</method>
		<method name="Basis">
			<return type="Basis">
			</return>
			<argument index="0" name="x_axis" type="Vector3">
			</argument>
			<argument index="1" name="y_axis" type="Vector3">
			</argument>
			<argument index="2" name="z_axis" type="Vector3">
			</argument>
			<description>
			</description>
		</method>
		<method name="determinant">
			<return type="float">
			</return>
			<description>
			</description>
		</method>
		<method name="get_euler">
			<return type="Vector3">
			</return>
			<description>
			</description>
		</method>
		<method name="get_orthogonal_index">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="get_scale">
			<return type="Vector3">
			</return>
			<description>
			</description>
		</method>
		<method name="inverse">
			<return type="Basis">
			</return>
			<description>
			</description>
		</method>
		<method name="orthonormalized">
			<return type="Basis">
			</return>
			<description>
			</description>
		</method>
		<method name="rotated">
			<return type="Basis">
			</return>
			<argument index="0" name="axis" type="Vector3">
			</argument>
			<argument index="1" name="phi" type="float">
			</argument>
			<description>
			</description>
		</method>
		<method name="scaled">
			<return type="Basis">
			</return>
			<argument index="0" name="scale" type="Vector3">
			</argument>
			<description>
			</description>
		</method>
		<method name="tdotx">
			<return type="float">
			</return>
			<argument index="0" name="with" type="Vector3">
			</argument>
			<description>
			</description>
		</method>
		<method name="tdoty">
			<return type="float">
			</return>
			<argument index="0" name="with" type="Vector3">
			</argument>
			<description>
			</description>
		</method>
		<method name="tdotz">
			<return type="float">
			</return>
			<argument index="0" name="with" type="Vector3">
			</argument>
			<description>
			</description>
		</method>
		<method name="transposed">
			<return type="Basis">
			</return>
			<description>
			</description>
		</method>
		<method name="xform">
			<return type="Vector3">
			</return>
			<argument index="0" name="v" type="Vector3">
			</argument>
			<description>
			</description>
		</method>
		<method name="xform_inv">
			<return type="Vector3">
			</return>
			<argument index="0" name="v" type="Vector3">
			</argument>
			<description>
			</description>
		</method>
	</methods>
	<members>
		<member name="x" type="Vector3" setter="" getter="">
		</member>
		<member name="y" type="Vector3" setter="" getter="">
		</member>
		<member name="z" type="Vector3" setter="" getter="">
		</member>
	</members>
	<constants>
	</constants>
</class>
