<?xml version="1.0" encoding="UTF-8" ?>
<class name="EditorImportPlugin" inherits="Reference" category="Core" version="3.1">
	<brief_description>
		Registers a custom resource importer in the editor. Use the class to parse any file and import it as a new resource type.
	</brief_description>
	<description>
		EditorImportPlugins provide a way to extend the editor's resource import functionality. Use them to import resources from custom files or to provide alternatives to the editor's existing importers. Register your [EditorPlugin] with [method EditorPlugin.add_import_plugin].
		EditorImportPlugins work by associating with specific file extensions and a resource type. See [method get_recognized_extension] and [method get_resource_type]). They may optionally specify some import presets that affect the import process. EditorImportPlugins are responsible for creating the resources and saving them in the [code].import[/code] directory.
		Below is an example EditorImportPlugin that imports a [Mesh] from a file with the extension ".special" or ".spec":
		[codeblock]
		tool
		extends EditorImportPlugin

		func get_importer_name():
		    return "my.special.plugin"

		func get_visible_name():
		    return "Special Mesh Importer"

		func get_recognized_extensions():
		    return ["special", "spec"]

		func get_save_extension():
		    return "mesh"

		func get_resource_type():
		    return "Mesh"

		func get_preset_count():
		    return 1

		func get_preset_name(i):
		    return "Default"

		func get_import_options(i):
		    return [{"name": "my_option", "default_value": false}]

		func import(source_file, save_path, options, r_platform_variants, r_gen_files):
		    var file = File.new()
		    if file.open(source_file, File.READ) != OK:
		        return FAILED

		    var mesh = Mesh.new()

		    var filename = save_path + "." + get_save_extension()
		    ResourceSaver.save(filename, mesh)
		    return OK
		[/codeblock]
	</description>
	<tutorials>
	</tutorials>
	<demos>
	</demos>
	<methods>
		<method name="get_import_options" qualifiers="virtual">
			<return type="Array">
			</return>
			<argument index="0" name="preset" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_import_order" qualifiers="virtual">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="get_importer_name" qualifiers="virtual">
			<return type="String">
			</return>
			<description>
			</description>
		</method>
		<method name="get_option_visibility" qualifiers="virtual">
			<return type="bool">
			</return>
			<argument index="0" name="option" type="String">
			</argument>
			<argument index="1" name="options" type="Dictionary">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_preset_count" qualifiers="virtual">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="get_preset_name" qualifiers="virtual">
			<return type="String">
			</return>
			<argument index="0" name="preset" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_priority" qualifiers="virtual">
			<return type="float">
			</return>
			<description>
			</description>
		</method>
		<method name="get_recognized_extensions" qualifiers="virtual">
			<return type="Array">
			</return>
			<description>
			</description>
		</method>
		<method name="get_resource_type" qualifiers="virtual">
			<return type="String">
			</return>
			<description>
			</description>
		</method>
		<method name="get_save_extension" qualifiers="virtual">
			<return type="String">
			</return>
			<description>
			</description>
		</method>
		<method name="get_visible_name" qualifiers="virtual">
			<return type="String">
			</return>
			<description>
			</description>
		</method>
		<method name="import" qualifiers="virtual">
			<return type="int">
			</return>
			<argument index="0" name="source_file" type="String">
			</argument>
			<argument index="1" name="save_path" type="String">
			</argument>
			<argument index="2" name="options" type="Dictionary">
			</argument>
			<argument index="3" name="r_platform_variants" type="Array">
			</argument>
			<argument index="4" name="r_gen_files" type="Array">
			</argument>
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
