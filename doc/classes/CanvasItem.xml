<?xml version="1.0" encoding="UTF-8" ?>
<class name="CanvasItem" inherits="Node" category="Core" version="3.1">
	<brief_description>
		Base class of anything 2D.
	</brief_description>
	<description>
		Base class of anything 2D. Canvas items are laid out in a tree and children inherit and extend the transform of their parent. CanvasItem is extended by [Control], for anything GUI related, and by [Node2D] for anything 2D engine related.
		Any CanvasItem can draw. For this, the "update" function must be called, then NOTIFICATION_DRAW will be received on idle time to request redraw. Because of this, canvas items don't need to be redraw on every frame, improving the performance significantly. Several functions for drawing on the CanvasItem are provided (see draw_* functions). They can only be used inside the notification, signal or _draw() overrides function, though.
		Canvas items are draw in tree order. By default, children are on top of their parents so a root CanvasItem will be drawn behind everything (this can be changed per item though).
		Canvas items can also be hidden (hiding also their subtree). They provide many means for changing standard parameters such as opacity (for it and the subtree) and self opacity, blend mode.
		Ultimately, a transform notification can be requested, which will notify the node that its global position changed in case the parent tree changed.
	</description>
	<tutorials>
	</tutorials>
	<demos>
	</demos>
	<methods>
		<method name="_draw" qualifiers="virtual">
			<return type="void">
			</return>
			<description>
			</description>
		</method>
		<method name="draw_char">
			<return type="float">
			</return>
			<argument index="0" name="font" type="Font">
			</argument>
			<argument index="1" name="position" type="Vector2">
			</argument>
			<argument index="2" name="char" type="String">
			</argument>
			<argument index="3" name="next" type="String">
			</argument>
			<argument index="4" name="modulate" type="Color" default="Color( 1, 1, 1, 1 )">
			</argument>
			<description>
			</description>
		</method>
		<method name="draw_circle">
			<return type="void">
			</return>
			<argument index="0" name="position" type="Vector2">
			</argument>
			<argument index="1" name="radius" type="float">
			</argument>
			<argument index="2" name="color" type="Color">
			</argument>
			<description>
			</description>
		</method>
		<method name="draw_colored_polygon">
			<return type="void">
			</return>
			<argument index="0" name="points" type="PoolVector2Array">
			</argument>
			<argument index="1" name="color" type="Color">
			</argument>
			<argument index="2" name="uvs" type="PoolVector2Array" default="PoolVector2Array(  )">
			</argument>
			<argument index="3" name="texture" type="Texture" default="null">
			</argument>
			<argument index="4" name="normal_map" type="Texture" default="null">
			</argument>
			<argument index="5" name="antialiased" type="bool" default="false">
			</argument>
			<description>
			</description>
		</method>
		<method name="draw_line">
			<return type="void">
			</return>
			<argument index="0" name="from" type="Vector2">
			</argument>
			<argument index="1" name="to" type="Vector2">
			</argument>
			<argument index="2" name="color" type="Color">
			</argument>
			<argument index="3" name="width" type="float" default="1.0">
			</argument>
			<argument index="4" name="antialiased" type="bool" default="false">
			</argument>
			<description>
			</description>
		</method>
		<method name="draw_mesh">
			<return type="void">
			</return>
			<argument index="0" name="mesh" type="Mesh">
			</argument>
			<argument index="1" name="texture" type="Texture">
			</argument>
			<argument index="2" name="normal_map" type="Texture" default="null">
			</argument>
			<description>
			</description>
		</method>
		<method name="draw_multiline">
			<return type="void">
			</return>
			<argument index="0" name="points" type="PoolVector2Array">
			</argument>
			<argument index="1" name="color" type="Color">
			</argument>
			<argument index="2" name="width" type="float" default="1.0">
			</argument>
			<argument index="3" name="antialiased" type="bool" default="false">
			</argument>
			<description>
			</description>
		</method>
		<method name="draw_multiline_colors">
			<return type="void">
			</return>
			<argument index="0" name="points" type="PoolVector2Array">
			</argument>
			<argument index="1" name="colors" type="PoolColorArray">
			</argument>
			<argument index="2" name="width" type="float" default="1.0">
			</argument>
			<argument index="3" name="antialiased" type="bool" default="false">
			</argument>
			<description>
			</description>
		</method>
		<method name="draw_multimesh">
			<return type="void">
			</return>
			<argument index="0" name="mesh" type="Mesh">
			</argument>
			<argument index="1" name="texture" type="Texture">
			</argument>
			<argument index="2" name="normal_map" type="Texture" default="null">
			</argument>
			<description>
			</description>
		</method>
		<method name="draw_polygon">
			<return type="void">
			</return>
			<argument index="0" name="points" type="PoolVector2Array">
			</argument>
			<argument index="1" name="colors" type="PoolColorArray">
			</argument>
			<argument index="2" name="uvs" type="PoolVector2Array" default="PoolVector2Array(  )">
			</argument>
			<argument index="3" name="texture" type="Texture" default="null">
			</argument>
			<argument index="4" name="normal_map" type="Texture" default="null">
			</argument>
			<argument index="5" name="antialiased" type="bool" default="false">
			</argument>
			<description>
			</description>
		</method>
		<method name="draw_polyline">
			<return type="void">
			</return>
			<argument index="0" name="points" type="PoolVector2Array">
			</argument>
			<argument index="1" name="color" type="Color">
			</argument>
			<argument index="2" name="width" type="float" default="1.0">
			</argument>
			<argument index="3" name="antialiased" type="bool" default="false">
			</argument>
			<description>
			</description>
		</method>
		<method name="draw_polyline_colors">
			<return type="void">
			</return>
			<argument index="0" name="points" type="PoolVector2Array">
			</argument>
			<argument index="1" name="colors" type="PoolColorArray">
			</argument>
			<argument index="2" name="width" type="float" default="1.0">
			</argument>
			<argument index="3" name="antialiased" type="bool" default="false">
			</argument>
			<description>
			</description>
		</method>
		<method name="draw_primitive">
			<return type="void">
			</return>
			<argument index="0" name="points" type="PoolVector2Array">
			</argument>
			<argument index="1" name="colors" type="PoolColorArray">
			</argument>
			<argument index="2" name="uvs" type="PoolVector2Array">
			</argument>
			<argument index="3" name="texture" type="Texture" default="null">
			</argument>
			<argument index="4" name="width" type="float" default="1.0">
			</argument>
			<argument index="5" name="normal_map" type="Texture" default="null">
			</argument>
			<description>
			</description>
		</method>
		<method name="draw_rect">
			<return type="void">
			</return>
			<argument index="0" name="rect" type="Rect2">
			</argument>
			<argument index="1" name="color" type="Color">
			</argument>
			<argument index="2" name="filled" type="bool" default="true">
			</argument>
			<description>
			</description>
		</method>
		<method name="draw_set_transform">
			<return type="void">
			</return>
			<argument index="0" name="position" type="Vector2">
			</argument>
			<argument index="1" name="rotation" type="float">
			</argument>
			<argument index="2" name="scale" type="Vector2">
			</argument>
			<description>
			</description>
		</method>
		<method name="draw_set_transform_matrix">
			<return type="void">
			</return>
			<argument index="0" name="xform" type="Transform2D">
			</argument>
			<description>
			</description>
		</method>
		<method name="draw_string">
			<return type="void">
			</return>
			<argument index="0" name="font" type="Font">
			</argument>
			<argument index="1" name="position" type="Vector2">
			</argument>
			<argument index="2" name="text" type="String">
			</argument>
			<argument index="3" name="modulate" type="Color" default="Color( 1, 1, 1, 1 )">
			</argument>
			<argument index="4" name="clip_w" type="int" default="-1">
			</argument>
			<description>
			</description>
		</method>
		<method name="draw_style_box">
			<return type="void">
			</return>
			<argument index="0" name="style_box" type="StyleBox">
			</argument>
			<argument index="1" name="rect" type="Rect2">
			</argument>
			<description>
			</description>
		</method>
		<method name="draw_texture">
			<return type="void">
			</return>
			<argument index="0" name="texture" type="Texture">
			</argument>
			<argument index="1" name="position" type="Vector2">
			</argument>
			<argument index="2" name="modulate" type="Color" default="Color( 1, 1, 1, 1 )">
			</argument>
			<argument index="3" name="normal_map" type="Texture" default="null">
			</argument>
			<description>
			</description>
		</method>
		<method name="draw_texture_rect">
			<return type="void">
			</return>
			<argument index="0" name="texture" type="Texture">
			</argument>
			<argument index="1" name="rect" type="Rect2">
			</argument>
			<argument index="2" name="tile" type="bool">
			</argument>
			<argument index="3" name="modulate" type="Color" default="Color( 1, 1, 1, 1 )">
			</argument>
			<argument index="4" name="transpose" type="bool" default="false">
			</argument>
			<argument index="5" name="normal_map" type="Texture" default="null">
			</argument>
			<description>
			</description>
		</method>
		<method name="draw_texture_rect_region">
			<return type="void">
			</return>
			<argument index="0" name="texture" type="Texture">
			</argument>
			<argument index="1" name="rect" type="Rect2">
			</argument>
			<argument index="2" name="src_rect" type="Rect2">
			</argument>
			<argument index="3" name="modulate" type="Color" default="Color( 1, 1, 1, 1 )">
			</argument>
			<argument index="4" name="transpose" type="bool" default="false">
			</argument>
			<argument index="5" name="normal_map" type="Texture" default="null">
			</argument>
			<argument index="6" name="clip_uv" type="bool" default="true">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_canvas" qualifiers="const">
			<return type="RID">
			</return>
			<description>
			</description>
		</method>
		<method name="get_canvas_item" qualifiers="const">
			<return type="RID">
			</return>
			<description>
			</description>
		</method>
		<method name="get_canvas_transform" qualifiers="const">
			<return type="Transform2D">
			</return>
			<description>
			</description>
		</method>
		<method name="get_global_mouse_position" qualifiers="const">
			<return type="Vector2">
			</return>
			<description>
			</description>
		</method>
		<method name="get_global_transform" qualifiers="const">
			<return type="Transform2D">
			</return>
			<description>
			</description>
		</method>
		<method name="get_global_transform_with_canvas" qualifiers="const">
			<return type="Transform2D">
			</return>
			<description>
			</description>
		</method>
		<method name="get_local_mouse_position" qualifiers="const">
			<return type="Vector2">
			</return>
			<description>
			</description>
		</method>
		<method name="get_transform" qualifiers="const">
			<return type="Transform2D">
			</return>
			<description>
			</description>
		</method>
		<method name="get_viewport_rect" qualifiers="const">
			<return type="Rect2">
			</return>
			<description>
			</description>
		</method>
		<method name="get_viewport_transform" qualifiers="const">
			<return type="Transform2D">
			</return>
			<description>
			</description>
		</method>
		<method name="get_world_2d" qualifiers="const">
			<return type="World2D">
			</return>
			<description>
			</description>
		</method>
		<method name="hide">
			<return type="void">
			</return>
			<description>
			</description>
		</method>
		<method name="is_local_transform_notification_enabled" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="is_set_as_toplevel" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="is_transform_notification_enabled" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="is_visible_in_tree" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="make_canvas_position_local" qualifiers="const">
			<return type="Vector2">
			</return>
			<argument index="0" name="screen_point" type="Vector2">
			</argument>
			<description>
			</description>
		</method>
		<method name="make_input_local" qualifiers="const">
			<return type="InputEvent">
			</return>
			<argument index="0" name="event" type="InputEvent">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_as_toplevel">
			<return type="void">
			</return>
			<argument index="0" name="enable" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_notify_local_transform">
			<return type="void">
			</return>
			<argument index="0" name="enable" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_notify_transform">
			<return type="void">
			</return>
			<argument index="0" name="enable" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="show">
			<return type="void">
			</return>
			<description>
			</description>
		</method>
		<method name="update">
			<return type="void">
			</return>
			<description>
			</description>
		</method>
	</methods>
	<members>
		<member name="light_mask" type="int" setter="set_light_mask" getter="get_light_mask">
		</member>
		<member name="material" type="Material" setter="set_material" getter="get_material">
		</member>
		<member name="modulate" type="Color" setter="set_modulate" getter="get_modulate">
		</member>
		<member name="self_modulate" type="Color" setter="set_self_modulate" getter="get_self_modulate">
		</member>
		<member name="show_behind_parent" type="bool" setter="set_draw_behind_parent" getter="is_draw_behind_parent_enabled">
		</member>
		<member name="show_on_top" type="bool" setter="_set_on_top" getter="_is_on_top">
		</member>
		<member name="use_parent_material" type="bool" setter="set_use_parent_material" getter="get_use_parent_material">
		</member>
		<member name="visible" type="bool" setter="set_visible" getter="is_visible">
		</member>
	</members>
	<signals>
		<signal name="draw">
			<description>
			</description>
		</signal>
		<signal name="hide">
			<description>
			</description>
		</signal>
		<signal name="item_rect_changed">
			<description>
			</description>
		</signal>
		<signal name="visibility_changed">
			<description>
			</description>
		</signal>
	</signals>
	<constants>
		<constant name="BLEND_MODE_MIX" value="0" enum="BlendMode">
		</constant>
		<constant name="BLEND_MODE_ADD" value="1" enum="BlendMode">
		</constant>
		<constant name="BLEND_MODE_SUB" value="2" enum="BlendMode">
		</constant>
		<constant name="BLEND_MODE_MUL" value="3" enum="BlendMode">
		</constant>
		<constant name="BLEND_MODE_PREMULT_ALPHA" value="4" enum="BlendMode">
		</constant>
		<constant name="BLEND_MODE_DISABLED" value="5" enum="BlendMode">
		</constant>
		<constant name="NOTIFICATION_TRANSFORM_CHANGED" value="29">
		</constant>
		<constant name="NOTIFICATION_DRAW" value="30">
		</constant>
		<constant name="NOTIFICATION_VISIBILITY_CHANGED" value="31">
		</constant>
		<constant name="NOTIFICATION_ENTER_CANVAS" value="32">
		</constant>
		<constant name="NOTIFICATION_EXIT_CANVAS" value="33">
		</constant>
	</constants>
</class>
