<?xml version="1.0" encoding="UTF-8" ?>
<class name="Node" inherits="Object" category="Core" version="3.1">
	<brief_description>
		Base class for all [i]scene[/i] objects.
	</brief_description>
	<description>
		Nodes are Godot's building blocks. They can be assigned as the child of another node, resulting in a tree arrangement. A given node can contain any number of nodes as children with the requirement that all siblings (direct children of a node) should have unique names.
		A tree of nodes is called a [i]scene[/i]. Scenes can be saved to the disk and then instanced into other scenes. This allows for very high flexibility in the architecture and data model of Godot projects.
		[b]Scene tree:[/b] The [SceneTree] contains the active tree of nodes. When a node is added to the scene tree, it receives the NOTIFICATION_ENTER_TREE notification and its [method _enter_tree] callback is triggered. Child nodes are always added [i]after[/i] their parent node, i.e. the [method _enter_tree] callback of a parent node will be triggered before its child's.
		Once all nodes have been added in the scene tree, they receive the NOTIFICATION_READY notification and their respective [method _ready] callbacks are triggered. For groups of nodes, the [method _ready] callback is called in reverse order, starting with the children and moving up to the parent nodes.
		This means that when adding a node to the scene tree, the following order will be used for the callbacks: [method _enter_tree] of the parent, [method _enter_tree] of the children, [method _ready] of the children and finally [method _ready] of the parent (recursively for the entire scene tree).
		[b]Processing:[/b] Nodes can override the "process" state, so that they receive a callback on each frame requesting them to process (do something). Normal processing (callback [method _process], toggled with [method set_process]) happens as fast as possible and is dependent on the frame rate, so the processing time [i]delta[/i] is passed as an argument. Physics processing (callback [method _physics_process], toggled with [method set_physics_process]) happens a fixed number of times per second (60 by default) and is useful for code related to the physics engine.
		Nodes can also process input events. When present, the [method _input] function will be called for each input that the program receives. In many cases, this can be overkill (unless used for simple projects), and the [method _unhandled_input] function might be preferred; it is called when the input event was not handled by anyone else (typically, GUI [Control] nodes), ensuring that the node only receives the events that were meant for it.
		To keep track of the scene hierarchy (especially when instancing scenes into other scenes), an "owner" can be set for the node with [method set_owner]. This keeps track of who instanced what. This is mostly useful when writing editors and tools, though.
		Finally, when a node is freed with [method free] or [method queue_free], it will also free all its children.
		[b]Groups:[/b] Nodes can be added to as many groups as you want to be easy to manage, you could create groups like "enemies" or "collectables" for example, depending on your game. See [method add_to_group], [method is_in_group] and [method remove_from_group]. You can then retrieve all nodes in these groups, iterate them and even call methods on groups via the methods on [SceneTree].
		[b]Networking with nodes:[/b] After connecting to a server (or making one, see [NetworkedMultiplayerENet]) it is possible to use the built-in RPC (remote procedure call) system to communicate over the network. By calling [method rpc] with a method name, it will be called locally and in all connected peers (peers = clients and the server that accepts connections). To identify which node receives the RPC call Godot will use its [NodePath] (make sure node names are the same on all peers). Also take a look at the high-level networking tutorial and corresponding demos.
	</description>
	<tutorials>
	</tutorials>
	<demos>
	</demos>
	<methods>
		<method name="_enter_tree" qualifiers="virtual">
			<return type="void">
			</return>
			<description>
			</description>
		</method>
		<method name="_exit_tree" qualifiers="virtual">
			<return type="void">
			</return>
			<description>
			</description>
		</method>
		<method name="_input" qualifiers="virtual">
			<return type="void">
			</return>
			<argument index="0" name="event" type="InputEvent">
			</argument>
			<description>
			</description>
		</method>
		<method name="_physics_process" qualifiers="virtual">
			<return type="void">
			</return>
			<argument index="0" name="delta" type="float">
			</argument>
			<description>
			</description>
		</method>
		<method name="_process" qualifiers="virtual">
			<return type="void">
			</return>
			<argument index="0" name="delta" type="float">
			</argument>
			<description>
			</description>
		</method>
		<method name="_ready" qualifiers="virtual">
			<return type="void">
			</return>
			<description>
			</description>
		</method>
		<method name="_unhandled_input" qualifiers="virtual">
			<return type="void">
			</return>
			<argument index="0" name="event" type="InputEvent">
			</argument>
			<description>
			</description>
		</method>
		<method name="_unhandled_key_input" qualifiers="virtual">
			<return type="void">
			</return>
			<argument index="0" name="event" type="InputEventKey">
			</argument>
			<description>
			</description>
		</method>
		<method name="add_child">
			<return type="void">
			</return>
			<argument index="0" name="node" type="Node">
			</argument>
			<argument index="1" name="legible_unique_name" type="bool" default="false">
			</argument>
			<description>
			</description>
		</method>
		<method name="add_child_below_node">
			<return type="void">
			</return>
			<argument index="0" name="node" type="Node">
			</argument>
			<argument index="1" name="child_node" type="Node">
			</argument>
			<argument index="2" name="legible_unique_name" type="bool" default="false">
			</argument>
			<description>
			</description>
		</method>
		<method name="add_to_group">
			<return type="void">
			</return>
			<argument index="0" name="group" type="String">
			</argument>
			<argument index="1" name="persistent" type="bool" default="false">
			</argument>
			<description>
			</description>
		</method>
		<method name="can_process" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="duplicate" qualifiers="const">
			<return type="Node">
			</return>
			<argument index="0" name="flags" type="int" default="15">
			</argument>
			<description>
			</description>
		</method>
		<method name="find_node" qualifiers="const">
			<return type="Node">
			</return>
			<argument index="0" name="mask" type="String">
			</argument>
			<argument index="1" name="recursive" type="bool" default="true">
			</argument>
			<argument index="2" name="owned" type="bool" default="true">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_child" qualifiers="const">
			<return type="Node">
			</return>
			<argument index="0" name="idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_child_count" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="get_children" qualifiers="const">
			<return type="Array">
			</return>
			<description>
			</description>
		</method>
		<method name="get_groups" qualifiers="const">
			<return type="Array">
			</return>
			<description>
			</description>
		</method>
		<method name="get_index" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="get_network_master" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="get_node" qualifiers="const">
			<return type="Node">
			</return>
			<argument index="0" name="path" type="NodePath">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_node_and_resource">
			<return type="Array">
			</return>
			<argument index="0" name="path" type="NodePath">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_parent" qualifiers="const">
			<return type="Node">
			</return>
			<description>
			</description>
		</method>
		<method name="get_path" qualifiers="const">
			<return type="NodePath">
			</return>
			<description>
			</description>
		</method>
		<method name="get_path_to" qualifiers="const">
			<return type="NodePath">
			</return>
			<argument index="0" name="node" type="Node">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_physics_process_delta_time" qualifiers="const">
			<return type="float">
			</return>
			<description>
			</description>
		</method>
		<method name="get_position_in_parent" qualifiers="const">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="get_process_delta_time" qualifiers="const">
			<return type="float">
			</return>
			<description>
			</description>
		</method>
		<method name="get_scene_instance_load_placeholder" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="get_tree" qualifiers="const">
			<return type="SceneTree">
			</return>
			<description>
			</description>
		</method>
		<method name="get_viewport" qualifiers="const">
			<return type="Viewport">
			</return>
			<description>
			</description>
		</method>
		<method name="has_node" qualifiers="const">
			<return type="bool">
			</return>
			<argument index="0" name="path" type="NodePath">
			</argument>
			<description>
			</description>
		</method>
		<method name="has_node_and_resource" qualifiers="const">
			<return type="bool">
			</return>
			<argument index="0" name="path" type="NodePath">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_a_parent_of" qualifiers="const">
			<return type="bool">
			</return>
			<argument index="0" name="node" type="Node">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_displayed_folded" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="is_greater_than" qualifiers="const">
			<return type="bool">
			</return>
			<argument index="0" name="node" type="Node">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_in_group" qualifiers="const">
			<return type="bool">
			</return>
			<argument index="0" name="group" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_inside_tree" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="is_network_master" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="is_physics_processing" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="is_physics_processing_internal" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="is_processing" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="is_processing_input" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="is_processing_internal" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="is_processing_unhandled_input" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="is_processing_unhandled_key_input" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="move_child">
			<return type="void">
			</return>
			<argument index="0" name="child_node" type="Node">
			</argument>
			<argument index="1" name="to_position" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="print_stray_nodes">
			<return type="void">
			</return>
			<description>
			</description>
		</method>
		<method name="print_tree">
			<return type="void">
			</return>
			<description>
			</description>
		</method>
		<method name="print_tree_pretty">
			<return type="void">
			</return>
			<description>
			</description>
		</method>
		<method name="propagate_call">
			<return type="void">
			</return>
			<argument index="0" name="method" type="String">
			</argument>
			<argument index="1" name="args" type="Array" default="[  ]">
			</argument>
			<argument index="2" name="parent_first" type="bool" default="false">
			</argument>
			<description>
			</description>
		</method>
		<method name="propagate_notification">
			<return type="void">
			</return>
			<argument index="0" name="what" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="queue_free">
			<return type="void">
			</return>
			<description>
			</description>
		</method>
		<method name="raise">
			<return type="void">
			</return>
			<description>
			</description>
		</method>
		<method name="remove_and_skip">
			<return type="void">
			</return>
			<description>
			</description>
		</method>
		<method name="remove_child">
			<return type="void">
			</return>
			<argument index="0" name="node" type="Node">
			</argument>
			<description>
			</description>
		</method>
		<method name="remove_from_group">
			<return type="void">
			</return>
			<argument index="0" name="group" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="replace_by">
			<return type="void">
			</return>
			<argument index="0" name="node" type="Node">
			</argument>
			<argument index="1" name="keep_data" type="bool" default="false">
			</argument>
			<description>
			</description>
		</method>
		<method name="request_ready">
			<return type="void">
			</return>
			<description>
			</description>
		</method>
		<method name="rpc" qualifiers="vararg">
			<return type="Variant">
			</return>
			<argument index="0" name="method" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="rpc_config">
			<return type="void">
			</return>
			<argument index="0" name="method" type="String">
			</argument>
			<argument index="1" name="mode" type="int" enum="Node.RPCMode">
			</argument>
			<description>
			</description>
		</method>
		<method name="rpc_id" qualifiers="vararg">
			<return type="Variant">
			</return>
			<argument index="0" name="peer_id" type="int">
			</argument>
			<argument index="1" name="method" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="rpc_unreliable" qualifiers="vararg">
			<return type="Variant">
			</return>
			<argument index="0" name="method" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="rpc_unreliable_id" qualifiers="vararg">
			<return type="Variant">
			</return>
			<argument index="0" name="peer_id" type="int">
			</argument>
			<argument index="1" name="method" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="rset">
			<return type="void">
			</return>
			<argument index="0" name="property" type="String">
			</argument>
			<argument index="1" name="value" type="Variant">
			</argument>
			<description>
			</description>
		</method>
		<method name="rset_config">
			<return type="void">
			</return>
			<argument index="0" name="property" type="String">
			</argument>
			<argument index="1" name="mode" type="int" enum="Node.RPCMode">
			</argument>
			<description>
			</description>
		</method>
		<method name="rset_id">
			<return type="void">
			</return>
			<argument index="0" name="peer_id" type="int">
			</argument>
			<argument index="1" name="property" type="String">
			</argument>
			<argument index="2" name="value" type="Variant">
			</argument>
			<description>
			</description>
		</method>
		<method name="rset_unreliable">
			<return type="void">
			</return>
			<argument index="0" name="property" type="String">
			</argument>
			<argument index="1" name="value" type="Variant">
			</argument>
			<description>
			</description>
		</method>
		<method name="rset_unreliable_id">
			<return type="void">
			</return>
			<argument index="0" name="peer_id" type="int">
			</argument>
			<argument index="1" name="property" type="String">
			</argument>
			<argument index="2" name="value" type="Variant">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_display_folded">
			<return type="void">
			</return>
			<argument index="0" name="fold" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_network_master">
			<return type="void">
			</return>
			<argument index="0" name="id" type="int">
			</argument>
			<argument index="1" name="recursive" type="bool" default="true">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_physics_process">
			<return type="void">
			</return>
			<argument index="0" name="enable" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_physics_process_internal">
			<return type="void">
			</return>
			<argument index="0" name="enable" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_process">
			<return type="void">
			</return>
			<argument index="0" name="enable" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_process_input">
			<return type="void">
			</return>
			<argument index="0" name="enable" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_process_internal">
			<return type="void">
			</return>
			<argument index="0" name="enable" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_process_unhandled_input">
			<return type="void">
			</return>
			<argument index="0" name="enable" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_process_unhandled_key_input">
			<return type="void">
			</return>
			<argument index="0" name="enable" type="bool">
			</argument>
			<description>
			</description>
		</method>
		<method name="set_scene_instance_load_placeholder">
			<return type="void">
			</return>
			<argument index="0" name="load_placeholder" type="bool">
			</argument>
			<description>
			</description>
		</method>
	</methods>
	<members>
		<member name="custom_multiplayer" type="MultiplayerAPI" setter="set_custom_multiplayer" getter="get_custom_multiplayer">
		</member>
		<member name="filename" type="String" setter="set_filename" getter="get_filename">
		</member>
		<member name="multiplayer" type="MultiplayerAPI" setter="" getter="get_multiplayer">
		</member>
		<member name="name" type="String" setter="set_name" getter="get_name">
		</member>
		<member name="owner" type="Node" setter="set_owner" getter="get_owner">
		</member>
		<member name="pause_mode" type="int" setter="set_pause_mode" getter="get_pause_mode" enum="Node.PauseMode">
		</member>
	</members>
	<signals>
		<signal name="ready">
			<description>
			</description>
		</signal>
		<signal name="renamed">
			<description>
			</description>
		</signal>
		<signal name="tree_entered">
			<description>
			</description>
		</signal>
		<signal name="tree_exited">
			<description>
			</description>
		</signal>
		<signal name="tree_exiting">
			<description>
			</description>
		</signal>
	</signals>
	<constants>
		<constant name="NOTIFICATION_ENTER_TREE" value="10">
		</constant>
		<constant name="NOTIFICATION_EXIT_TREE" value="11">
		</constant>
		<constant name="NOTIFICATION_MOVED_IN_PARENT" value="12">
		</constant>
		<constant name="NOTIFICATION_READY" value="13">
		</constant>
		<constant name="NOTIFICATION_PAUSED" value="14">
		</constant>
		<constant name="NOTIFICATION_UNPAUSED" value="15">
		</constant>
		<constant name="NOTIFICATION_PHYSICS_PROCESS" value="16">
		</constant>
		<constant name="NOTIFICATION_PROCESS" value="17">
		</constant>
		<constant name="NOTIFICATION_PARENTED" value="18">
		</constant>
		<constant name="NOTIFICATION_UNPARENTED" value="19">
		</constant>
		<constant name="NOTIFICATION_INSTANCED" value="20">
		</constant>
		<constant name="NOTIFICATION_DRAG_BEGIN" value="21">
		</constant>
		<constant name="NOTIFICATION_DRAG_END" value="22">
		</constant>
		<constant name="NOTIFICATION_PATH_CHANGED" value="23">
		</constant>
		<constant name="NOTIFICATION_TRANSLATION_CHANGED" value="24">
		</constant>
		<constant name="NOTIFICATION_INTERNAL_PROCESS" value="25">
		</constant>
		<constant name="NOTIFICATION_INTERNAL_PHYSICS_PROCESS" value="26">
		</constant>
		<constant name="RPC_MODE_DISABLED" value="0" enum="RPCMode">
		</constant>
		<constant name="RPC_MODE_REMOTE" value="1" enum="RPCMode">
		</constant>
		<constant name="RPC_MODE_SYNC" value="2" enum="RPCMode">
		</constant>
		<constant name="RPC_MODE_MASTER" value="3" enum="RPCMode">
		</constant>
		<constant name="RPC_MODE_SLAVE" value="4" enum="RPCMode">
		</constant>
		<constant name="PAUSE_MODE_INHERIT" value="0" enum="PauseMode">
		</constant>
		<constant name="PAUSE_MODE_STOP" value="1" enum="PauseMode">
		</constant>
		<constant name="PAUSE_MODE_PROCESS" value="2" enum="PauseMode">
		</constant>
		<constant name="DUPLICATE_SIGNALS" value="1" enum="DuplicateFlags">
		</constant>
		<constant name="DUPLICATE_GROUPS" value="2" enum="DuplicateFlags">
		</constant>
		<constant name="DUPLICATE_SCRIPTS" value="4" enum="DuplicateFlags">
		</constant>
		<constant name="DUPLICATE_USE_INSTANCING" value="8" enum="DuplicateFlags">
		</constant>
	</constants>
</class>
