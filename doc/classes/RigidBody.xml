<?xml version="1.0" encoding="UTF-8" ?>
<class name="RigidBody" inherits="PhysicsBody" category="Core" version="3.1">
	<brief_description>
		Physics Body whose position is determined through physics simulation in 3D space.
	</brief_description>
	<description>
		This is the node that implements full 3D physics. This means that you do not control a RigidBody directly. Instead you can apply forces to it (gravity, impulses, etc.), and the physics simulation will calculate the resulting movement, collision, bouncing, rotating, etc.
		A RigidBody has 4 behavior [member mode]s: Rigid, Static, Character, and Kinematic.
		[b]Note:[/b] Don't change a RigidBody's position every frame or very often. Sporadic changes work fine, but physics runs at a different granularity (fixed hz) than usual rendering (process callback) and maybe even in a separate thread, so changing this from a process loop will yield strange behavior. If you need to directly affect the body's state, use [method _integrate_forces], which allows you to directly access the physics state.
		If you need to override the default physics behavior, you can write a custom force integration. See [member custom_integrator].
	</description>
	<tutorials>
	</tutorials>
	<demos>
	</demos>
	<methods>
		<method name="_integrate_forces" qualifiers="virtual">
			<return type="void">
			</return>
			<argument index="0" name="state" type="PhysicsDirectBodyState">
			</argument>
			<description>
			</description>
		</method>
		<method name="apply_impulse">
			<return type="void">
			</return>
			<argument index="0" name="position" type="Vector3">
			</argument>
			<argument index="1" name="impulse" type="Vector3">
			</argument>
			<description>
			</description>
		</method>
		<method name="apply_torque_impulse">
			<return type="void">
			</return>
			<argument index="0" name="impulse" type="Vector3">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_colliding_bodies" qualifiers="const">
			<return type="Array">
			</return>
			<description>
			</description>
		</method>
		<method name="set_axis_velocity">
			<return type="void">
			</return>
			<argument index="0" name="axis_velocity" type="Vector3">
			</argument>
			<description>
			</description>
		</method>
	</methods>
	<members>
		<member name="angular_damp" type="float" setter="set_angular_damp" getter="get_angular_damp">
		</member>
		<member name="angular_velocity" type="Vector3" setter="set_angular_velocity" getter="get_angular_velocity">
		</member>
		<member name="axis_lock_angular_x" type="bool" setter="set_axis_lock" getter="get_axis_lock">
		</member>
		<member name="axis_lock_angular_y" type="bool" setter="set_axis_lock" getter="get_axis_lock">
		</member>
		<member name="axis_lock_angular_z" type="bool" setter="set_axis_lock" getter="get_axis_lock">
		</member>
		<member name="axis_lock_linear_x" type="bool" setter="set_axis_lock" getter="get_axis_lock">
		</member>
		<member name="axis_lock_linear_y" type="bool" setter="set_axis_lock" getter="get_axis_lock">
		</member>
		<member name="axis_lock_linear_z" type="bool" setter="set_axis_lock" getter="get_axis_lock">
		</member>
		<member name="bounce" type="float" setter="set_bounce" getter="get_bounce">
		</member>
		<member name="can_sleep" type="bool" setter="set_can_sleep" getter="is_able_to_sleep">
		</member>
		<member name="contact_monitor" type="bool" setter="set_contact_monitor" getter="is_contact_monitor_enabled">
		</member>
		<member name="contacts_reported" type="int" setter="set_max_contacts_reported" getter="get_max_contacts_reported">
		</member>
		<member name="continuous_cd" type="bool" setter="set_use_continuous_collision_detection" getter="is_using_continuous_collision_detection">
		</member>
		<member name="custom_integrator" type="bool" setter="set_use_custom_integrator" getter="is_using_custom_integrator">
		</member>
		<member name="friction" type="float" setter="set_friction" getter="get_friction">
		</member>
		<member name="gravity_scale" type="float" setter="set_gravity_scale" getter="get_gravity_scale">
		</member>
		<member name="linear_damp" type="float" setter="set_linear_damp" getter="get_linear_damp">
		</member>
		<member name="linear_velocity" type="Vector3" setter="set_linear_velocity" getter="get_linear_velocity">
		</member>
		<member name="mass" type="float" setter="set_mass" getter="get_mass">
		</member>
		<member name="mode" type="int" setter="set_mode" getter="get_mode" enum="RigidBody.Mode">
		</member>
		<member name="sleeping" type="bool" setter="set_sleeping" getter="is_sleeping">
		</member>
		<member name="weight" type="float" setter="set_weight" getter="get_weight">
		</member>
	</members>
	<signals>
		<signal name="body_entered">
			<argument index="0" name="body" type="Object">
			</argument>
			<description>
			</description>
		</signal>
		<signal name="body_exited">
			<argument index="0" name="body" type="Object">
			</argument>
			<description>
			</description>
		</signal>
		<signal name="body_shape_entered">
			<argument index="0" name="body_id" type="int">
			</argument>
			<argument index="1" name="body" type="Object">
			</argument>
			<argument index="2" name="body_shape" type="int">
			</argument>
			<argument index="3" name="local_shape" type="int">
			</argument>
			<description>
			</description>
		</signal>
		<signal name="body_shape_exited">
			<argument index="0" name="body_id" type="int">
			</argument>
			<argument index="1" name="body" type="Object">
			</argument>
			<argument index="2" name="body_shape" type="int">
			</argument>
			<argument index="3" name="local_shape" type="int">
			</argument>
			<description>
			</description>
		</signal>
		<signal name="sleeping_state_changed">
			<description>
			</description>
		</signal>
	</signals>
	<constants>
		<constant name="MODE_RIGID" value="0" enum="Mode">
		</constant>
		<constant name="MODE_STATIC" value="1" enum="Mode">
		</constant>
		<constant name="MODE_CHARACTER" value="2" enum="Mode">
		</constant>
		<constant name="MODE_KINEMATIC" value="3" enum="Mode">
		</constant>
	</constants>
</class>
