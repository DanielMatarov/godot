<?xml version="1.0" encoding="UTF-8" ?>
<class name="Plane" category="Built-In Types" version="3.1">
	<brief_description>
		Plane in hessian form.
	</brief_description>
	<description>
		Plane represents a normalized plane equation. Basically, "normal" is the normal of the plane (a,b,c normalized), and "d" is the distance from the origin to the plane (in the direction of "normal"). "Over" or "Above" the plane is considered the side of the plane towards where the normal is pointing.
	</description>
	<tutorials>
	</tutorials>
	<demos>
	</demos>
	<methods>
		<method name="Plane">
			<return type="Plane">
			</return>
			<argument index="0" name="a" type="float">
			</argument>
			<argument index="1" name="b" type="float">
			</argument>
			<argument index="2" name="c" type="float">
			</argument>
			<argument index="3" name="d" type="float">
			</argument>
			<description>
			</description>
		</method>
		<method name="Plane">
			<return type="Plane">
			</return>
			<argument index="0" name="v1" type="Vector3">
			</argument>
			<argument index="1" name="v2" type="Vector3">
			</argument>
			<argument index="2" name="v3" type="Vector3">
			</argument>
			<description>
			</description>
		</method>
		<method name="Plane">
			<return type="Plane">
			</return>
			<argument index="0" name="normal" type="Vector3">
			</argument>
			<argument index="1" name="d" type="float">
			</argument>
			<description>
			</description>
		</method>
		<method name="center">
			<return type="Vector3">
			</return>
			<description>
			</description>
		</method>
		<method name="distance_to">
			<return type="float">
			</return>
			<argument index="0" name="point" type="Vector3">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_any_point">
			<return type="Vector3">
			</return>
			<description>
			</description>
		</method>
		<method name="has_point">
			<return type="bool">
			</return>
			<argument index="0" name="point" type="Vector3">
			</argument>
			<argument index="1" name="epsilon" type="float" default="0.00001">
			</argument>
			<description>
			</description>
		</method>
		<method name="intersect_3">
			<return type="Vector3">
			</return>
			<argument index="0" name="b" type="Plane">
			</argument>
			<argument index="1" name="c" type="Plane">
			</argument>
			<description>
			</description>
		</method>
		<method name="intersects_ray">
			<return type="Vector3">
			</return>
			<argument index="0" name="from" type="Vector3">
			</argument>
			<argument index="1" name="dir" type="Vector3">
			</argument>
			<description>
			</description>
		</method>
		<method name="intersects_segment">
			<return type="Vector3">
			</return>
			<argument index="0" name="begin" type="Vector3">
			</argument>
			<argument index="1" name="end" type="Vector3">
			</argument>
			<description>
			</description>
		</method>
		<method name="is_point_over">
			<return type="bool">
			</return>
			<argument index="0" name="point" type="Vector3">
			</argument>
			<description>
			</description>
		</method>
		<method name="normalized">
			<return type="Plane">
			</return>
			<description>
			</description>
		</method>
		<method name="project">
			<return type="Vector3">
			</return>
			<argument index="0" name="point" type="Vector3">
			</argument>
			<description>
			</description>
		</method>
	</methods>
	<members>
		<member name="d" type="float" setter="" getter="">
		</member>
		<member name="normal" type="Vector3" setter="" getter="">
		</member>
		<member name="x" type="float" setter="" getter="">
		</member>
		<member name="y" type="float" setter="" getter="">
		</member>
		<member name="z" type="float" setter="" getter="">
		</member>
	</members>
	<constants>
	</constants>
</class>
