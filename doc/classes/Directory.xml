<?xml version="1.0" encoding="UTF-8" ?>
<class name="Directory" inherits="Reference" category="Core" version="3.1">
	<brief_description>
		Type used to handle the filesystem.
	</brief_description>
	<description>
		Directory type. It is used to manage directories and their content (not restricted to the project folder).
		Here is an example on how to iterate through the files of a directory:
		[codeblock]
		func dir_contents(path):
		    var dir = Directory.new()
		    if dir.open(path) == OK:
		        dir.list_dir_begin()
		        var file_name = dir.get_next()
		        while (file_name != ""):
		            if dir.current_is_dir():
		                print("Found directory: " + file_name)
		            else:
		                print("Found file: " + file_name)
		            file_name = dir.get_next()
		    else:
		        print("An error occurred when trying to access the path.")
		[/codeblock]
	</description>
	<tutorials>
	</tutorials>
	<demos>
	</demos>
	<methods>
		<method name="change_dir">
			<return type="int" enum="Error">
			</return>
			<argument index="0" name="todir" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="copy">
			<return type="int" enum="Error">
			</return>
			<argument index="0" name="from" type="String">
			</argument>
			<argument index="1" name="to" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="current_is_dir" qualifiers="const">
			<return type="bool">
			</return>
			<description>
			</description>
		</method>
		<method name="dir_exists">
			<return type="bool">
			</return>
			<argument index="0" name="path" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="file_exists">
			<return type="bool">
			</return>
			<argument index="0" name="path" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_current_dir">
			<return type="String">
			</return>
			<description>
			</description>
		</method>
		<method name="get_current_drive">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="get_drive">
			<return type="String">
			</return>
			<argument index="0" name="idx" type="int">
			</argument>
			<description>
			</description>
		</method>
		<method name="get_drive_count">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="get_next">
			<return type="String">
			</return>
			<description>
			</description>
		</method>
		<method name="get_space_left">
			<return type="int">
			</return>
			<description>
			</description>
		</method>
		<method name="list_dir_begin">
			<return type="int" enum="Error">
			</return>
			<argument index="0" name="skip_navigational" type="bool" default="false">
			</argument>
			<argument index="1" name="skip_hidden" type="bool" default="false">
			</argument>
			<description>
			</description>
		</method>
		<method name="list_dir_end">
			<return type="void">
			</return>
			<description>
			</description>
		</method>
		<method name="make_dir">
			<return type="int" enum="Error">
			</return>
			<argument index="0" name="path" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="make_dir_recursive">
			<return type="int" enum="Error">
			</return>
			<argument index="0" name="path" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="open">
			<return type="int" enum="Error">
			</return>
			<argument index="0" name="path" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="remove">
			<return type="int" enum="Error">
			</return>
			<argument index="0" name="path" type="String">
			</argument>
			<description>
			</description>
		</method>
		<method name="rename">
			<return type="int" enum="Error">
			</return>
			<argument index="0" name="from" type="String">
			</argument>
			<argument index="1" name="to" type="String">
			</argument>
			<description>
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
